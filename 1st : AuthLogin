public class MainActivity extends AppCompatActivity {
    private FirebaseAuth mAuth;
    private FirebaseFirestore mFireStore;
    private StorageReference mStorge;
    public static String TAG = "TAG";
    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        mAuth = FirebaseAuth.getInstance();
        mStorge = FirebaseStorage.getInstance().getReference().child("images");
        mFireStore = FirebaseFirestore.getInstance();
    }
   
    @Override
    public void onStart() {
        super.onStart();
        // Check if user is signed in (non-null) and update UI accordingly.
        FirebaseUser currentUser = mAuth.getCurrentUser();
        if (currentUser ==null){
            //this mean user is not signIn (no user)
                //Intent logIn_signUp = new Intent(getApplicationContext(),LoginRegistration.class);
                //startActivity(logIn_signUp);
        }
    }
    // to create user 
    private void signUp(String email,String password){
        mAuth.createUserWithEmailAndPassword(email, password)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            Log.d(TAG, "createUserWithEmail:success");
                            FirebaseUser user = mAuth.getCurrentUser();
                            //do stuff if Successful
                            
                            /////////////////////
                            
                            
                            final String user_Id = mAuth.getCurrentUser().getUid();

                            //storage ref for image
                            StorageReference user_profile = mStorge.child(user_Id+".jpg");

                            //to upload img and check if image is uploaded or not
                            user_profile.putFile(mImageUri).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                                @Override
                                public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> uploadtask) {
                                    if (uploadtask.isSuccessful()){

                                        //get the uploaded img url
                                        String imgURL = uploadtask.getResult().getDownloadUrl().toString();
                                        //put the data into map
                                        Map<String,Object> userMap = new HashMap<>();
                                        userMap.put("name",name);
                                        userMap.put("image",imgURL);

                                        //here where are we going to store all of the users
                                        mFireStore.collection("Users").document(user_Id).set(userMap).addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void aVoid) {
                                                progressBar.setVisibility(View.GONE);

                                                SendUserToMainActivity();

                                            }
                                        });

                                    }else {
                                        Toast.makeText(RegisterActivity.this, "ErrorIMG"+uploadtask.getException(), Toast.LENGTH_LONG).show();
                                        progressBar.setVisibility(View.GONE);

                                    }
                                }
                            });
                           
                            /////////////////////
                            
                            
                        } else {
                            // If sign in fails, display a message to the user.
                            Log.w(TAG, "createUserWithEmail:failure", task.getException());
                            Toast.makeText(getApplicationContext(), "Authentication failed.",
                                    Toast.LENGTH_SHORT).show();
                            //do stuff if not Successful
                        }

                        // ...
                    }
                });
    }
    // to sign in
    private void SignIn(String email,String password){
        mAuth.signInWithEmailAndPassword(email, password)
                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {
                    @Override
                    public void onComplete(@NonNull Task<AuthResult> task) {
                        if (task.isSuccessful()) {
                            // Sign in success, update UI with the signed-in user's information
                            Log.d(TAG, "signInWithEmail:success");
                            FirebaseUser user = mAuth.getCurrentUser();
                            //do stuff if Successful
                        } else {
                            // If sign in fails, display a message to the user.
                            Log.w(TAG, "signInWithEmail:failure", task.getException());
                            Toast.makeText(getApplicationContext(), "Authentication failed.",
                                    Toast.LENGTH_SHORT).show();
                            //do stuff if not Successful
                        }

                        // ...
                    }
                });
    }
    //to get user info
    private void getUserInfo(){
        FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
        if (user != null) {
            // Name, email address, and profile photo Url
            String name = user.getDisplayName();
            String email = user.getEmail();
            Uri photoUrl = user.getPhotoUrl();

            // Check if user's email is verified
            boolean emailVerified = user.isEmailVerified();

            // The user's ID, unique to the Firebase project. Do NOT use this value to
            // authenticate with your backend server, if you have one. Use
            // FirebaseUser.getToken() instead.
            String uid = user.getUid();
        }
    }
    
}
